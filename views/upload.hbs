<!DOCTYPE html>
<html lang="en">

<head>
  {{> meta}}
  <title>Create New Post</title>
</head>

<body>
  <script>0</script>
  {{> nav}}

  <main class="upload-container">
    {{> back_to_home}}

    <header class="upload-header">
      <h1 class="upload-title">Create New Post</h1>
      <p class="upload-subtitle">Write and preview your blog post content</p>
    </header>

    <form id="post-form" method="POST" action="/api/posts">
      <!-- Post Metadata -->
      <section class="post-metadata">
        <div class="metadata-row">
          <div class="form-group">
            <label for="post-title" class="form-label">Post Title</label>
            <input type="text" id="post-title" name="title" class="form-input" placeholder="Enter your post title..."
              required>
          </div>
          <div class="form-group">
            <label for="post-slug" class="form-label">URL Slug</label>
            <input type="text" id="post-slug" name="slug" class="form-input" placeholder="auto-generated-from-title"
              readonly>
          </div>
        </div>
        <div class="form-group">
          <label for="post-excerpt" class="form-label">Excerpt</label>
          <textarea id="post-excerpt" name="excerpt" class="form-input form-textarea"
            placeholder="Write a brief description of your post..." rows="3"></textarea>
        </div>
      </section>

      <!-- Editor Layout -->
      <div class="editor-layout">
        <!-- HTML Editor -->
        <div class="editor-panel">
          <div class="panel-header">
            <h3 class="panel-title">HTML Editor</h3>
          </div>
          <div class="panel-content">
            <textarea id="html-editor" name="content" class="html-editor" placeholder="Write your HTML content here...

Example:
<h2>Introduction</h2>
<p>This is a paragraph with <strong>bold text</strong> and <em>italic text</em>.</p>

<h3>Code Example</h3>
<pre><code>console.log('Hello, World!');</code></pre>

<blockquote>
<p>This is a quote that will be styled nicely.</p>
</blockquote>"></textarea>
          </div>
        </div>

        <!-- Preview Panel -->
        <div class="editor-panel">
          <div class="panel-header">
            <h3 class="panel-title">Live Preview</h3>
            <div class="toggle-container">
              <span class="toggle-label">Auto Scroll</span>
              <div id="auto-scroll-toggle" class="toggle active" onclick="toggleSwitch(this)">
                <div class="toggle-thumb"></div>
              </div>
            </div>
          </div>
          <div class="panel-content">
            <div id="preview-content" class="post-body preview-content">
              <p style="color: #52525b; font-style: italic;">Start typing in the editor to see your preview...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="action-buttons">
        <button type="button" class="btn btn-secondary" id="save-draft" onclick="saveDraft()">
          ðŸ’¾ Save Draft
        </button>
        <button type="submit" class="btn btn-primary">
          ðŸš€ Publish Post
        </button>
      </div>
    </form>
  </main>

  <script src="/scripts/sanitize.js"></script>
  <script>
    class BlogEditor {
      constructor() {
        this.elements = {
          htmlEditor: document.querySelector('#html-editor'),
          previewContent: document.querySelector('#preview-content'),
          titleInput: document.querySelector('#post-title'),
          slugInput: document.querySelector('#post-slug'),
          excerptInput: document.querySelector('#post-excerpt'),
          autoScrollToggle: document.querySelector('#auto-scroll-toggle'),
          postForm: document.querySelector('#post-form'),
          saveDraftBtn: document.querySelector('#save-draft')

        };

        this.autoSaveTimeout = null;
        this.DRAFT_KEY = 'blog-post-draft';
        this.AUTOSAVE_DELAY = 2000;

        this.init();
      }

      init() {
        this.loadDraft();
        this.bindEvents();
        this.updatePreview();
        this.configureScrollSync();
      }

      bindEvents() {
        // Editor events
        this.elements.htmlEditor.addEventListener('input', () => this.updatePreview());
        this.elements.htmlEditor.addEventListener('paste', () => {
          setTimeout(() => this.updatePreview(), 10);
        });
        this.elements.htmlEditor.addEventListener('scroll', () => this.handleEditorScroll());

        // Form events
        this.elements.titleInput.addEventListener('input', () => this.updateSlug());
        this.elements.postForm.addEventListener('submit', () => this.clearDraft());

        // Auto-save events
        [this.elements.titleInput, this.elements.excerptInput, this.elements.htmlEditor]
          .forEach(input => input.addEventListener('input', () => this.scheduleAutoSave()));

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));
      }

      updatePreview() {
        const htmlContent = sanitizeModule.sanitizePostContent(this.elements.htmlEditor.value);

        if (htmlContent.trim()) {
          this.elements.previewContent.innerHTML = htmlContent;
        } else {
          this.elements.previewContent.innerHTML =
            '<p style="color: #52525b; font-style: italic;">Start typing in the editor to see your preview...</p>';
        }
      }

      async updateSlug() {
        const title = this.elements.titleInput.value;

        if (!title) {
          this.elements.slugInput.value = '';
          return;
        }

        try {
          const response = await fetch('/api/posts/slugify', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text: title })
          });

          const data = await response.json();
          this.elements.slugInput.value = data.result;
        } catch (error) {
          console.error('Failed to generate slug:', error);
        }
      }

      scheduleAutoSave() {
        clearTimeout(this.autoSaveTimeout);
        this.autoSaveTimeout = setTimeout(() => {
          this.saveDraftToStorage();
          console.log('Draft auto-saved');
        }, this.AUTOSAVE_DELAY);
      }

      saveDraftToStorage() {
        const formData = {
          title: this.elements.titleInput.value,
          excerpt: this.elements.excerptInput.value,
          content: this.elements.htmlEditor.value,
          slug: this.elements.slugInput.value
        };

        localStorage.setItem(this.DRAFT_KEY, JSON.stringify(formData));
      }

      saveDraft() {
        this.saveDraftToStorage();
        this.showSaveConfirmation();
      }

      showSaveConfirmation() {
        const btn = this.elements.saveDraftBtn;
        const originalText = btn.innerHTML;

        btn.innerHTML = 'âœ… Saved!';
        btn.style.backgroundColor = '#059669';

        setTimeout(() => {
          btn.innerHTML = originalText;
          btn.style.backgroundColor = '';
        }, 2000);
      }

      loadDraft() {
        const draft = localStorage.getItem(this.DRAFT_KEY);

        if (!draft) return;

        try {
          const data = JSON.parse(draft);
          this.elements.titleInput.value = data.title || '';
          this.elements.excerptInput.value = data.excerpt || '';
          this.elements.htmlEditor.value = data.content || '';
          this.elements.slugInput.value = data.slug || '';
        } catch (error) {
          console.error('Failed to load draft:', error);
        }
      }

      clearDraft() {
        localStorage.removeItem(this.DRAFT_KEY);
      }

      handleEditorScroll() {
        if (!this.elements.autoScrollToggle.classList.contains('active')) return;

        const editor = this.elements.htmlEditor;
        const preview = this.elements.previewContent;

        const scrollPercent = editor.scrollTop / (editor.scrollHeight - editor.clientHeight);
        preview.scrollTop = scrollPercent * (preview.scrollHeight - preview.clientHeight);
      }

      configureScrollSync() {
        this.updateScrollBehavior();
      }

      toggleScrollSync() {
        this.elements.autoScrollToggle.classList.toggle('active');
        this.updateScrollBehavior();
      }

      updateScrollBehavior() {
        const isActive = this.elements.autoScrollToggle.classList.contains('active');
        this.elements.previewContent.style.overflow = isActive ? 'hidden' : 'auto';
      }

      handleKeyboardShortcuts(event) {
        if ((event.ctrlKey || event.metaKey) && event.key === 's') {
          event.preventDefault();
          this.saveDraft();
        }
      }
    }

    function toggleSwitch(element) {
      window.blogEditor?.toggleScrollSync();
    }

    document.addEventListener('DOMContentLoaded', function () {
      window.blogEditor = new BlogEditor();
    });
  </script>
</body>

</html>