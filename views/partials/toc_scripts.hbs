<script>
  class TocGenerator {
    constructor() {
      this.elements = {
        tocList: document.querySelector('#toc-list'),
        navbar: document.querySelector('nav')
      };

      this.config = {
        headingSelectors: 'h2, h3, h4',
        headingWithIdSelectors: 'h2[id], h3[id], h4[id]',
        excludeClass: 'toc-title',
        headerMarginRems: 2.5
      };

      this.init();
    }

    init() {
      this.generateToc();
      this.initHighlighting();
    }

    slugify(text) {
      return text
        .toLowerCase()
        .trim()
        .replace(/[^\w\s-]/g, '')     // Remove special characters
        .replace(/[\s_-]+/g, '-')     // Replace spaces and underscores with hyphens
        .replace(/^-+|-+$/g, '');     // Remove leading/trailing hyphens
    }

    calculateScrollThreshold() {
      const rootFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);
      const headerMaxMargin = this.config.headerMarginRems * rootFontSize;
      const navbarHeight = this.elements.navbar ? this.elements.navbar.offsetHeight : 0;
      return navbarHeight + headerMaxMargin;
    }

    createTocItem(heading) {
      const li = document.createElement('li');
      const a = document.createElement('a');
      const level = parseInt(heading.tagName.charAt(1));

      if (level > 2) {
        li.className = `toc-h${level}`;
      }

      a.href = `#${heading.id}`;
      a.textContent = heading.textContent;

      li.appendChild(a);
      return li;
    }

    generateToc() {
      if (!this.elements.tocList) return;

      const headings = document.querySelectorAll(this.config.headingSelectors);

      headings.forEach(heading => {
        if (heading.classList.contains(this.config.excludeClass)) {
          return;
        }

        if (!heading.id) {
          heading.id = this.slugify(heading.textContent);
        }

        const tocItem = this.createTocItem(heading);
        this.elements.tocList.appendChild(tocItem);
      });
    }

    getActiveHeading(headings, threshold) {
      let current = '';

      headings.forEach(heading => {
        const rect = heading.getBoundingClientRect();
        if (rect.top <= threshold) {
          current = heading.id;
        }
      });

      return current;
    }

    updateActiveTocItem() {
      const tocLinks = document.querySelectorAll('#toc-list a');
      const headings = document.querySelectorAll(this.config.headingWithIdSelectors);
      const firstHeading = Array.from(headings).find(h => h.id);
      const threshold = this.calculateScrollThreshold();

      let activeId = this.getActiveHeading(headings, threshold);

      // Default to first heading if none are active
      if (!activeId && firstHeading) {
        activeId = firstHeading.id;
      }

      // Update active states
      tocLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href') === '#' + activeId) {
          link.classList.add('active');
        }
      });
    }

    initHighlighting() {
      window.addEventListener('scroll', () => this.updateActiveTocItem());
      this.updateActiveTocItem();
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new TocGenerator();
  });
</script>