<!DOCTYPE html>
<html lang="en">

<head>
  {{> meta}}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.15.4/beautify-html.js"></script>
  <meta name="robots" content="noindex">
  <title>{{#if edit}}Create New Post{{else}}Edit Post{{/if}}</title>
</head>

<body>
  <script>0</script>
  {{> nav}}

  <main class="upload-container">
    {{> back_to_home}}
{{> post_editor_main}}
  </main>

  <script src="/scripts/sanitize.js"></script>
  <script src="/scripts/slugify.js"></script>
  <script>
    class DraftManager {
      constructor({ titleInput, excerptInput, htmlEditor, slugInput, saveDraftBtn }, isEdit) {
        this.titleInput = titleInput;
        this.excerptInput = excerptInput;
        this.htmlEditor = htmlEditor;
        this.slugInput = slugInput;
        this.saveDraftBtn = saveDraftBtn;

        this.DRAFT_KEY = 'blog-post-draft';
        this.AUTOSAVE_DELAY = 2000;
        this.autoSaveTimeout = null;
        this.isEdit = isEdit;

        if (!this.isEdit) {
          this.loadDraft();
          this.bindEvents();
        } else {
          this.saveDraftBtn.style.visibility = 'hidden';
        }
      }

      bindEvents() {
        [this.titleInput, this.excerptInput, this.htmlEditor].forEach(input => {
          input.addEventListener('input', () => this.scheduleAutoSave());
        });

        document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));
      }

      scheduleAutoSave() {
        clearTimeout(this.autoSaveTimeout);
        this.autoSaveTimeout = setTimeout(() => {
          this.saveDraftToStorage();
        }, this.AUTOSAVE_DELAY);
      }

      saveDraftToStorage() {
        const formData = {
          title: this.titleInput.value,
          excerpt: this.excerptInput.value,
          content: this.htmlEditor.value,
          slug: this.slugInput.value
        };
        localStorage.setItem(this.DRAFT_KEY, JSON.stringify(formData));
      }

      saveDraft() {
        this.saveDraftToStorage();
        this.showSaveConfirmation();
      }

      loadDraft() {
        const draft = localStorage.getItem(this.DRAFT_KEY);
        if (!draft) return;

        try {
          const data = JSON.parse(draft);
          this.titleInput.value = data.title || '';
          this.excerptInput.value = data.excerpt || '';
          this.htmlEditor.value = data.content || '';
          this.slugInput.value = data.slug || '';
        } catch (error) {
          console.error('Failed to load draft:', error);
        }
      }

      clearDraft() {
        localStorage.removeItem(this.DRAFT_KEY);
      }

      showSaveConfirmation() {
        const btn = this.saveDraftBtn;
        const originalText = btn.innerHTML;

        btn.innerHTML = 'Saved!';
        btn.style.backgroundColor = '#059669';

        setTimeout(() => {
          btn.innerHTML = originalText;
          btn.style.backgroundColor = '';
        }, 2000);
      }

      handleKeyboardShortcuts(event) {
        if ((event.ctrlKey || event.metaKey) && event.key === 's') {
          event.preventDefault();
          this.saveDraft();
        }
      }
    }

    class BlogEditor {
      constructor() {
        this.elements = {
          htmlEditor: document.querySelector('#html-editor'),
          previewContent: document.querySelector('#preview-content'),
          titleInput: document.querySelector('#post-title'),
          slugInput: document.querySelector('#post-slug'),
          excerptInput: document.querySelector('#post-excerpt'),
          autoScrollToggle: document.querySelector('#auto-scroll-toggle'),
          postForm: document.querySelector('#post-form'),
          saveDraftBtn: document.querySelector('#save-draft')
        };

        this.formMethod = this.elements.postForm.dataset.method;
        this.isEdit = this.formMethod !== 'POST';
        
        this.isScrollingEditor = false;
        this.isScrollingPreview = false;
        this.existingTimeout = undefined;

        this.drafts = new DraftManager(this.elements, this.isEdit);
        this.init();
      }

      init() {
        this.bindEvents();
        this.updatePreview();
        this.configureScrollSync();
        this.listenFormSubmit();

        const html = this.elements.htmlEditor.value;
        this.elements.htmlEditor.value = html_beautify(html, { indent_size: 4 });
      }

      listenFormSubmit() {
        this.elements.postForm.addEventListener('submit', async (e) => {
          e.preventDefault();

          const formData = new FormData(this.elements.postForm);
          const data = Object.fromEntries(formData.entries());
          
          if (this.isEdit) {
            data['id'] = this.elements.slugInput.value;
          }

          const response = await fetch('/api/posts', {
            method: this.formMethod,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
          });

          const postLocation = response.headers.get('Location');

          if (response.status === 201 || response.status === 204) {
            if (!this.isEdit) {
              this.drafts.clearDraft();
            }
            window.location.href = postLocation;
          } else if (response.redirected) {
            if (!this.isEdit) {
              this.drafts.saveDraft();
            }
            window.location.href = postLocation;
          } else {
            const { message } = await response.json();
            alert(`Erro: ${message}`);
          }
        });
      }

      bindEvents() {
        this.elements.htmlEditor.addEventListener('input', () => this.updatePreview());
        this.elements.htmlEditor.addEventListener('paste', () => {
          setTimeout(() => this.updatePreview(), 10);
        });

        this.elements.htmlEditor.addEventListener('scroll', () => this.handleEditorScroll());
        this.elements.previewContent.addEventListener('scroll', () => this.handlePreviewScroll());

        if (!this.isEdit) {
          this.elements.titleInput.addEventListener('input', () => this.updateSlug());
        }
      }

      updatePreview() {
        const htmlContent = sanitizeModule.sanitizePostContent(this.elements.htmlEditor.value);

        if (htmlContent.trim()) {
          this.elements.previewContent.innerHTML = htmlContent;
        } else {
          this.elements.previewContent.innerHTML =
            '<p style="color: #52525b; font-style: italic;">Start typing in the editor to see your preview...</p>';
        }
      }

      async updateSlug() {
        const title = this.elements.titleInput.value;
        this.elements.slugInput.value = title ? slugifyModule.slugifyTitle(title) : ''
      }

      handleEditorScroll() {
        if (!this.elements.autoScrollToggle.classList.contains('active') || this.isScrollingPreview) return;

        this.isScrollingEditor = true;
        const editor = this.elements.htmlEditor;
        const preview = this.elements.previewContent;

        const scrollPercent = editor.scrollTop / (editor.scrollHeight - editor.clientHeight);
        preview.scrollTop = scrollPercent * (preview.scrollHeight - preview.clientHeight);
        
        if (this.existingTimeout) {
          clearTimeout(this.existingTimeout);
        }

        this.existingTimeout = setTimeout(() => {
          console.log('set scrollingeditor to false')
          this.isScrollingEditor = false;
        }, 100);
      }
      
      handlePreviewScroll() {
        if (!this.elements.autoScrollToggle.classList.contains('active') || this.isScrollingEditor) return;

        this.isScrollingPreview = true;
        const editor = this.elements.htmlEditor;
        const preview = this.elements.previewContent;

        const scrollPercent = preview.scrollTop / (preview.scrollHeight - preview.clientHeight);
        editor.scrollTop = scrollPercent * (editor.scrollHeight - editor.clientHeight);

        if (this.existingTimeout) {
          clearTimeout(this.existingTimeout);
        }

        this.existingTimeout = setTimeout(() => {
          this.isScrollingPreview = false;
        }, 100);
      }

      configureScrollSync() {
        this.updateScrollBehavior();
      }

      toggleScrollSync() {
        this.elements.autoScrollToggle.classList.toggle('active');
        this.updateScrollBehavior();
      }

      updateScrollBehavior() {
        const isActive = this.elements.autoScrollToggle.classList.contains('active');
        const previewContent = this.elements.previewContent;

        if (isActive) {
          previewContent.style.scrollbarWidth = 'none';
        } else {
          previewContent.style.scrollbarWidth = 'unset';
        }
      }
    }

    document.addEventListener('DOMContentLoaded', function () {
      window.blogEditor = new BlogEditor();
    });

  </script>
</body>

</html>